{"ast":null,"code":"var _jsxFileName = \"D:\\\\`Mine\\\\Abhishek\\\\`My Files\\\\Streamlit\\\\Interactive DTree Component\\\\my_component\\\\frontend\\\\src\\\\Tree.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport downloadjs from \"downloadjs\";\nimport html2canvas from \"html2canvas\";\nimport { ArgsContext } from \"./ArgsContext\";\nimport Node from \"./Node\";\nimport \"./Node.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tree = props => {\n  _s();\n  const args = props.args;\n  const key = args.key;\n  const [lastFrameHeight, setLastFrameHeight] = useState(Streamlit.lastFrameHeight);\n  const treeRef = useRef(null);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log(lastFrameHeight, Streamlit.lastFrameHeight);\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [lastFrameHeight]);\n  if (lastFrameHeight !== Streamlit.lastFrameHeight) {\n    setLastFrameHeight(Streamlit.lastFrameHeight);\n  }\n  const treeToPng = async () => {\n    const element = document.querySelector(\".tree\");\n    const useWidth = element.scrollWidth;\n    const canvas = await html2canvas(document.querySelector(\".tree\"), {\n      width: useWidth,\n      windowWidth: useWidth\n    });\n    const dataURL = canvas.toDataURL(\"image/jpg\");\n    downloadjs(dataURL, `${key}.jpg`, \"image/jpg\");\n  };\n  console.log(lastFrameHeight, Streamlit.lastFrameHeight);\n\n  // const theme = args.theme\n  // const style: React.CSSProperties = {}\n\n  return /*#__PURE__*/_jsxDEV(ArgsContext.Provider, {\n    value: args,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => treeToPng(),\n      children: \"Download as Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree\",\n      ref: \"treeRef\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"rootNode\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Node, {\n            id: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Tree, \"sgguNs2mNYR9q5S8cQ/SX+nKb1o=\");\n_c = Tree;\nexport default _c2 = withStreamlitConnection(Tree);\nvar _c, _c2;\n$RefreshReg$(_c, \"Tree\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","React","useEffect","useState","useRef","downloadjs","html2canvas","ArgsContext","Node","jsxDEV","_jsxDEV","Tree","props","_s","args","key","lastFrameHeight","setLastFrameHeight","treeRef","intervalId","setInterval","console","log","clearInterval","treeToPng","element","document","querySelector","useWidth","scrollWidth","canvas","width","windowWidth","dataURL","toDataURL","Provider","value","children","onClick","e","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","id","_c","_c2","$RefreshReg$"],"sources":["D:/`Mine/Abhishek/`My Files/Streamlit/Interactive DTree Component/my_component/frontend/src/Tree.tsx"],"sourcesContent":["import {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect, useState, useRef } from \"react\"\n\nimport downloadjs from \"downloadjs\"\nimport html2canvas from \"html2canvas\"\nimport { ArgsContext } from \"./ArgsContext\"\nimport Node from \"./Node\"\nimport \"./Node.scss\"\n\nconst Tree = (props: ComponentProps) => {\n  const args = props.args\n  const key = args.key\n  const [lastFrameHeight, setLastFrameHeight] = useState(\n    Streamlit.lastFrameHeight\n  )\n  const treeRef = useRef(null)\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log(lastFrameHeight, Streamlit.lastFrameHeight)\n    }, 1000)\n    return () => clearInterval(intervalId)\n  }, [lastFrameHeight])\n\n  if (lastFrameHeight !== Streamlit.lastFrameHeight) {\n    setLastFrameHeight(Streamlit.lastFrameHeight)\n  }\n\n  const treeToPng = async () => {\n    const element = document.querySelector(\".tree\")!\n    const useWidth = element.scrollWidth\n    const canvas = await html2canvas(document.querySelector(\".tree\")!, {\n      width: useWidth,\n      windowWidth: useWidth,\n    })\n    const dataURL = canvas.toDataURL(\"image/jpg\")\n    downloadjs(dataURL, `${key}.jpg`, \"image/jpg\")\n  }\n\n  console.log(lastFrameHeight, Streamlit.lastFrameHeight)\n\n  // const theme = args.theme\n  // const style: React.CSSProperties = {}\n\n  return (\n    <ArgsContext.Provider value={args}>\n      <button onClick={(e) => treeToPng()}>Download as Image</button>\n      <div className=\"tree\" ref=\"treeRef\">\n        <ul className=\"rootNode\">\n          <li>\n            <Node id={0} />\n          </li>\n        </ul>\n      </div>\n    </ArgsContext.Provider>\n  )\n}\n\nexport default withStreamlitConnection(Tree)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}